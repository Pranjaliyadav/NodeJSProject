Strean and buffers

stream is an ongoing process
request is read by node in chunks

buffer is like a bus stop
construct allowing to hold multiple chunks and work on them and leave when theyre done

Types of errors

-syntax error 
-runtime error
-logical errors

HTTP hyper text transfer protocol

HTTPS -  Http secure ( httpm + data encryption )

core modules - http, https, fs, path, os
http - launch a server, send requests
https - launch a SSL server


//other ways to write this
// http.createServer(function(req, res){

// })

// http.createServer((req, res)=>{})

Event loop - in node app, keeps on running as long as there are event listeners registered


node js only uses 1 thread, how to handle multiple requests
security issues?

event loop starts when code is started automatically
handling event callbacks 

worker pool - do the heavy lifting, runs on diff thread, can connect with OS, totally detached from code and event loop

when worker is done, it will trigger callback

all this is built in

timers - execute setTimeour, setInterval callbacks
pending callbacks - execute I/O related callbacks that were deferred

poll - reteruve new io events execute their callbacks

check - execute setImmediate() callbacks

close callbacks - execute all close event callbacks

process.exit


client -> request -> server -> response -> client


run npm start
"start": "nodemon app.js"

expressJs framework on top of nodejs 

framework - set of helper fn, tools and rules that help build application
alternative to expressjs - vanilla nodejs, adonis.js, koa, sails.js

npm i --save express

Middlware - split code and run thorugh multiple fn

requests go from top to bottom

views will have bunch of html files

module.exports = path.dirname(require.main.filename);

template engines - dynamuc html content
in pug, indentation matters

MVC
separation of concers
Models Views Controllers
Models - represent your data in your code, work with ur data eg save , fetch
Views - what user sees, decoupled from app code
controllers - connecting models and views, contain in-between logic


SQL vs NoSQL - store data and make it easily accessible

quicker access than with a file
sql db eg - MySQL
NoSQL DB - MongoDB

core SQL db characteristic - data schema, data relations

SQL queries
SELECT * FROM users WHERE age > 38

NoSQL 
databse , collections(tables), documents(like data, but in JSON like format, they are schemaless, differnt structure can be there in single collection)
we dont hav eany relation, we look for duplicate data

Horizontal vs vertical scaling
HS - add more servers(and merge data in 1 DB)

VS - improve server capacity/hardware

SQL - data uses schemas, relations, data is distributed across multiple tables, horizontal scaling is difficult, vertical is possible

NoSQL - schema less, no(v few) relations, data is typically merged/nested in afew collections, both Hori and ver scaling possible, great performance for mass read & write requests
npm i --save mysql2


Sequelize - Object Relational Mapping Library

 npm i --save sequelize
 
 With Sequelize v5, findById() (old) was replaced by findByPk()

 Association  (relation ) -> 
 relate diff models and communicate

 MongoDB
 DB engine, for noSQL databases
 store and work on lots and lots of data
 multiple collections,
 having documents, schemaless
 uses JSON to store data in collection
 BSON(binary JSON)
 
 nosql characteristics
 no data schema - no structure required
 fewer data relations - can relate documents but you dont have to , use embedded document

 use mongodb atlas - cloud based
 create cluster
 choose free version
then go to security 
add your user with password, this user password can access collection then
add your ip, by default it will be added and white listed, these whitelisted ip address can access your cluster's services.
 install the mongoDB driver
 npm i --save mongodb
 pass- xfhsWKnmLqenYFRX


 doc mongodb crud operation - https://www.mongodb.com/docs/manual/crud/?msockid=1e032706fa4a60dd2ebf35c2fb4c6144
db.collection('products').insertOne() or .insertMany([])
 const response = await db.collection('products').find({_id : mongoDB.ObjectId(prodId)}).toArray()
 id access like above

 how to update data
      savedData =  db.collection('products')
      .updateOne({_id :new mongoDB.ObjectId(prodId)},{$set : this})

deleting by id
    const response = await db.collection('products').deleteOne({_id : new mongoDB.ObjectId(prodId)})

 const cartItems  =  await db.collection('products').find({_id : {$in : productIds}})
 $in is like In of typeorm

 Mongoose
a mongodb odm 
object document mapping library
like sql in sequelize but its orm
docs - https://mongoosejs.com/docs/
npm i --save mongoose


.save() - mongoose method to insert new data
.find() - to find data
 //this findById is a mongoose fn, it ill automatically convert your string to objectId string for checking
  Product.findById(prodId).then
    Product.findByIdAndDelete(productId)
    //nested prop
      cart : {
        items : [
            {
             productId : {type : Schema.Types.ObjectId, required : true},
             quantity : {type : Number, required : true}
            }]
    },

//creating relation bw users and product
  userId : {
    type : Schema.Types.ObjectId,
    //reference of other collection
    ref : 'User'
  }

//which keys to select
  //-_id will exclude _id
  .select('title price -_id')
  //populate some key with additional keys instead of just id, like relations's  user id is there, so get other user data as well
  .populate('userId', 'name')

  //add additonal method
userSchema.methods.addToCart = async function(product) 
  Order.find({'user.userId' : req.user._id})

    res.setHeader('Set-Cookie','loggedIn=true') //this will set a cookie
      const isLoggedIn = req
        .get('Cookie')
        .split(';')[0]
        .trim()
        .split('=')[1]
        
    Max time the loggedIn cookie will exist in 1 sesssion
          res.setHeader('Set-Cookie', 'loggedIn=true; Max-Age=10') //this will set a cookie
  
  only https sites will have this cookie
    res.setHeader('Set-Cookie', 'loggedIn=true; Secure') //this will set a cookie
    
    only http site will have this cookie
  res.setHeader('Set-Cookie', 'loggedIn=true; HttpOnly') //this will set a cookie
  
Sessions
client needs to tell server which session they bleong to
need to store in data based
stored in server side
cookie stored in client side

npm i --save express-session

//resave means - session will only be saved if something is changed in the session, not on every reload
app.use(session({secret : 'my secret', resave : false, saveUninitialized : false}))

npm i --save connect-mongodb-session

const store = new MongoDBStore({
    //connectin strig, which db to store data
    uri : MONGODB_URI,
    //collection where session is store
    collection : 'sessions'
})

you can check data in sessions collection in mongodb


Module - Authentication

for encryption of password - npm i --save bcryptjs

CSRF Attacks 
Cross Site Request Forgery
token creation - npm i --save csurf

npm i --save connect-flash
for displaying error message
app.use(flash())
req.flash('error', 'error message')
'error' is the key

Module - Sending mails
creating mail server is hard
so use 3rd party mail service for that

npm i --save nodemailer nodemailer-sendgrid-transport

Module - Validation

validate on client side using js - but it can be disabled from browser
validate on server side - hidden, so better and safe option.

database validation - mongodb has build in validation, but try to do validation before saving in db

express-validator package will be used
express-validator
const { check } = require('express-validator/check')
check('email').isEmail()

Module - Error handling
technical/netwrok error - mongodb server down, show error page to user
expected errors - file cant be read, database operation fails, inform user, possible retry
bugd/logical errors - user object used whn it doesnt exist, fix during development

working with errors

error is thrown, error is an object
error page( like 500 page)
intented page/respose wth error inform
redirect

Error & htp response codes
helps browser understand if some operation succeeded or not
2xx success - 200 operation succeeded, 201 - success, resource created
3xx redirect - 301 - moved permanently
4xx client side error - 401 un aunthentication, 403 unauthorized, 404 not found, 422 - invalid input, 409 - duplicate, 400 bad request
5xx server side error - 500 - server side errir

1×× Informational

100 Continue

101 Switching Protocols

102 Processing

2×× Success

200 OK

201 Created

202 Accepted

203 Non-authoritative Information

204 No Content

205 Reset Content

206 Partial Content

207 Multi-Status

208 Already Reported

226 IM Used

3×× Redirection

300 Multiple Choices

301 Moved Permanently

302 Found

303 See Other

304 Not Modified

305 Use Proxy

307 Temporary Redirect

308 Permanent Redirect

4×× Client Error

400 Bad Request

401 Unauthorized

402 Payment Required

403 Forbidden

404 Not Found

405 Method Not Allowed

406 Not Acceptable

407 Proxy Authentication Required

408 Request Timeout

409 Conflict

410 Gone

411 Length Required

412 Precondition Failed

413 Payload Too Large

414 Request-URI Too Long

415 Unsupported Media Type

416 Requested Range Not Satisfiable

417 Expectation Failed

418 I'm a teapot

421 Misdirected Request

422 Unprocessable Entity

423 Locked

424 Failed Dependency

426 Upgrade Required

428 Precondition Required

429 Too Many Requests

431 Request Header Fields Too Large

444 Connection Closed Without Response

451 Unavailable For Legal Reasons

499 Client Closed Request

5×× Server Error

500 Internal Server Error

501 Not Implemented

502 Bad Gateway

503 Service Unavailable

504 Gateway Timeout

505 HTTP Version Not Supported

506 Variant Also Negotiates

507 Insufficient Storage

508 Loop Detected

510 Not Extended

511 Network Authentication Required

599 Network Connect Timeout Error

Module - File upload and download

npm i --save multer
 - file parser
 app.use(multer({dest : 'images'}).single('image')) 
 when dest is added, t will store image in a folder

 pdf generation
 npm i --save pdfkit
 

 Module  Pagination

 Module Async js request
 JSON stands for JavaScript Object Notation and a typically JSON data structure
 
 Module Payments
 collect payment method > verify payment method > charge payment method > manage payment > process order in app
 use stripe
 so client will enter details , we collect credit card data and then send to stripe servers to verify it
 upon successful,verif, we get token from stripe, which we'll send to our server(node app)
 and then create payment data which will again sent to stripe server

 npm i --save stripe

 Module - Rest APIs
 GET, POST, PUT, PATCH, DELETE, OPTIONS

 REST principle
 1 uniform interface - clearly define API endpoints with clearly defined request + response data structures, like tos and Types
 Stateless interactions - server and client dont store any connection history, every request is handled separately
 cacheable - servers may set cahing headers to allow the client to cache responses
 client-server - server and client are separated, client is not concerned with persistent data Storage
 layered system - server may forward requested to other APIs
 code on demand - executable code may be transfeered from server to client


 Node compression
 npm i --save compression

 npm i --save morgan //makes login request easily

 when ssl is installed in system
 use command
 openssl req -nodes -new -x509 -keyout server.key -out server.cert
 this command will give private and public ssl keys packaged in a certificate
 
 Module  - Testing module
 automated code Testing
 Mocha to be used here, Chai also to be used and sinon
 
